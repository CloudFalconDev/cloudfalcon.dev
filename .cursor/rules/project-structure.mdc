---
description: 
globs: 
alwaysApply: false
---
# Project Structure Guide

This project is a [Next.js](mdc:README.md) application using the `/app` directory for routing and page components. The main directories and files are:

- [app/](mdc:app): Contains main application pages, layout, global styles, and fonts.
  - [page.tsx](mdc:app/page.tsx): Main landing page and entry point.
  - [kubernetes/page.tsx](mdc:app/kubernetes/page.tsx): Kubernetes tools subpage, uses MainNav for navigation.
  - [terraform/page.tsx](mdc:app/terraform/page.tsx): Terraform tools subpage, uses MainNav for navigation.
  - [security/page.tsx](mdc:app/security/page.tsx): Security tools subpage, uses MainNav for navigation.
  - [layout.tsx](mdc:app/layout.tsx): Global layout and font setup.
  - [globals.css](mdc:app/globals.css): Global CSS and Tailwind layers.
  - [fonts/](mdc:app/fonts): Custom font files (Geist).
- [components/](mdc:components): Shared React components.
  - [Header.tsx](mdc:components/Header.tsx): Site header, includes logo, MainNav, and contact button.
  - [Footer.tsx](mdc:components/Footer.tsx): Site footer, used on all pages.
  - [MainNav.tsx](mdc:components/MainNav.tsx): Navigation bar, used in Header and on subpages for consistent navigation.
  - [ui/](mdc:components/ui): Reusable UI primitives like [button.tsx](mdc:components/ui/button.tsx) and [input.tsx](mdc:components/ui/input.tsx).
  - [CalendlyWidget.tsx](mdc:components/CalendlyWidget.tsx): Embedded Calendly widget.
  - [GeometricBackground.tsx](mdc:components/GeometricBackground.tsx): Animated background.
- [data/](mdc:data): Data files for tools and services.
- [lib/](mdc:lib): Shared utility functions.
- [public/img/](mdc:public/img): Static assets (SVG, PNG logos, etc.).

Navigation and layout are modularized for maintainability and reusability.

## Landing Page Section Components
- Major sections of the landing page (e.g., Services, Platforms, IaC Tools, Services Automation, Pricing) must each be implemented as a separate React component in the `components/` directory.
- These section components should be imported and used in `app/page.tsx` instead of inline section code.
- This modular approach improves maintainability, readability, and reusability.
